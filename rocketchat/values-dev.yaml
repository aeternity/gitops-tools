encValues:
  ROOT_PASSWORD: "AgBtAawKy5vPJeVpS66eOOHu/h4PtETtfFQyspvpFEHuuJ7bWT02mxHmtk3UirnYlXOtP2dofDffvUmy9o3HK7FBIHuwW3dE5hfAEpIzSw8RFeYVXuy7ltc+0U3ORGnFvsjaEf9a/LnpCuVVA2qBIQGfyxJgvDbbVFMwVda4ShEPcmj0BtQhE1SbbfA9EBjAU8cV3gnjJPA3TPCsgOt3KafZk44qHLpt509CmEB0b8rHFjuaGCFKRQ8H5bCYR4OlMIn5hG+6HvZ9qvF0n0dKvj0U4shCC5xDfV38bFPyVcYA9iDHuq7ROdTBtJQPu5QFH2mGIkgpzz1oR+zxszO9IkowIeaNA8EyeP6jv7iN9kz9R4ExS2uRw2/ukQDTkwB4fckgwJfK4brTPhi/8afnmkWcdDZhHrMYCOy77zKqDbPC1ud+OsB9mGjrikIalG+S6pZI6JjIiKOnog6fHUz/LUk8NNVxkS33B8W+FSMzQvC7nO0/JNFDRLv/W+paof79ceQf4fDjvC4GqgCMgNmnIrznA71ghpPkBDcoN91TxTzTBR4/t/KjQQ4J+eZVUAxaWNDa5qEOt85siYXDq3c6PG7k9U62rPfwelht4+4kIGrxnf9m6Ki0WbV5bwqfE8n1+c1RFAMoS5KMEVEOt2UqbTS30wU1JujpA31RhCp3UAdOH2icFmphKdYZh9O42Lfu672R0njOXd6Lo3I="
  MONGO_PASSWORD: "AgARxIbixOxlb79J4nVSMXKcYmmRI1V4PSwD8D+LlcCJxf/M+8XA/Afjrnpj5aboeAN9pIzuhyar0/1yGhw/1osX91cZ9dceIEb0y6PQSCXRDIDQaLTVHlMa+H9KilxuxqZEivtdp38+9LJ+pF+alkpJkCTZKIz9XyBO5HBPQ+hPnvMhYjS0y0zhIJ5PRKn7zU1GHqTSJKU4bObsyPPww1aEgdmf31EBvGVz1GmXg5fNpIP8SwDy+W/B5eHxTsgGHQ35ax1r0vnu8n9vU5VGGxVOAQIg8zfdcq0JO0sdH4SkDwcP6kXAcNASfBkfZF/1wj/sJybDboq8F/Zf/S0oEw2CDvvBSrCIIUbx+4bnjDCenc/+uIjm8JL/n3fCF7dZ2zqpS1mD+YfAy5z5Dg1gsda3Lr95ME8SgYUdNfk3k4Nr2DHmZcJr9bdqH/hS2J0V5kl2gbRLEqvGXCYkdrfPjJfOfWmOvC83eoWTH5FpyXBcIrc0JdvqkeRPRh3B6C2ECq2iJyAkkIoV+HGSe/kxFp0NafLEZK0lCJBr2tE2vKzpb4XJ6UDGJpZYd/dn4IoRJq6PGv8591PBY57/nklbTHmvVeCr0qvvkFeOVXpuj9tDsxXGFnLkRAv1dJSD/zTbuVQ/Tfy0ZyWxIbSX5ie5fQ5odBANfgmoT0M85AVVjd/KEs2I1FtklCOnNBAlLEPy3Rams8jyTi0cOZM="

rocketchat:
  ## Rocket Chat image version
  ## ref: https://hub.docker.com/r/rocketchat/rocket.chat/tags
  ##
  image:
    ## NOTE: for microsservices, those two itens get ignored, 
    ## for now. 
    repository: registry.rocket.chat/rocketchat/rocket.chat
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  ## Host for the application
  ## set it to a domain pointing to your loadbalancer
  # host:

  replicaCount: 1
  minAvailable: 1

  smtp:
    enabled: false
    username: 
    password:
    host:
    port: 587

  # Extra env vars for Rocket.Chat:
  extraEnv: 
    #- name: ROOT_PASSW
      #valueFrom:
        #secretKeyRef:
          #name: rocketchat-secret
          #key: ROOT_PASSWORD
    #- name: MONGO_PASSW
      #valueFrom:
        #secretKeyRef:
          #name: rocketchat-secret
          #key: MONGO_PASSWORD
    # - name: MONGO_OPTIONS
    #   value: '{"ssl": "true"}'
     #- name: MONGO_OPLOG_URL
       #value: mongodb://oploguser:MONGO_PASSWORD@rocket-1:27017/local&replicaSet=rs0

  ## Specifies a Registration Token (obtainable at https://cloud.rocket.chat)
  #registrationToken: ""

  ## Specifies an Enterprise License
  # license: ""

  ## Pod anti-affinity can prevent the scheduler from placing RocketChat replicas on the same node.
  ## The default value "soft" means that the scheduler should *prefer* to not schedule two replica pods onto the same node but no guarantee is provided.
  ## The value "hard" means that the scheduler is *required* to not schedule two replica pods onto the same node.
  ## The value "" will disable pod anti-affinity so that no anti-affinity rules will be configured.
  ##
  podAntiAffinity: ''

  ## If anti-affinity is enabled sets the topologyKey to use for anti-affinity.
  ## This can be changed to, for example, failure-domain.beta.kubernetes.io/zone
  ##
  podAntiAffinityTopologyKey: kubernetes.io/hostname

  ## Assign custom affinity rules to the RocketChat instance
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2

  ## Use an existing secret file with the MongoDB Url and OplogUrl
  existingMongodbSecret: ''

  ## MongoDB URL if using an externally provisioned MongoDB
  externalMongodbUrl: # mongodb://user:password@localhost:27017/rocketchat
  externalMongodbOplogUrl: # mongodb://user:password@localhost:27017/local?replicaSet=rs0&authSource=admin

  ##
  ## MongoDB chart configuration
  ### ref https://github.com/helm/charts/tree/master/stable/mongodb#configuration
  ##
  mongodb:
    ## Enable or disable MongoDB dependency completely.
    enabled: true

    auth:
      rootPassword: ROOT_PASSWORD
      username: rocketchat
      password: MONGO_PASSWORD
      database: rocketchat

    architecture: replicaset
    replicaCount: 1
    arbiter:
      enabled: false
      pdb:
        minAvailable: 0
    pdb:
      minAvailable: 0

      # key:

    persistence:
      enabled: true
      ## mongodb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 8Gi

    volumePermissions: {enabled: true}

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    # existingClaim: existingClaimName
    ## rocketchat data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources:
  #   requests:
  #     memory: 512Mi
  #     cpu: 300m

  securityContext:
    enabled: true
    runAsUser: 999
    fsGroup: 999

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true

    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  ## Configure the ingress object to hook into existing infastructure
  ### ref : http://kubernetes.io/docs/user-guide/ingress/
  ###
  ingress:
    enabled: true
    # ingressClassName: "nxinx"
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    pathType: ImplementationSpecific
    hosts:
      - "rocketchat.dev.aeternity.io"
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

    labels: {}
    # key: value

    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP

    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000

    port: 80

  ## Optional custom labels for the deployment resource.
  deploymentLabels: {}

  ## Optional Pod Labels.
  podLabels: {}

  ## Optional Pod Annotations.
  podAnnotations:
    {}
    # prometheus.io/port: "9458"
    # prometheus.io/path: "/metrics"
    # prometheus.io/scrape: "true"

  ## Optional Prometheus scraping Settings
  prometheusScraping:
    enabled: false
    port: 9458

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  podDisruptionBudget: 
    enabled: true

  # # # # # # # # # # # # # # # # #
  #   M I C R O S E R V I C E S   #
  #  Only available to E.E users  #
  # # # # # # # # # # # # # # # # #

  ## Deploy as microservices?
  # Monolithic architecture, by default
  microservices: 
    enabled: false

    ## Parameters for each deployment: 
    presence: 
      replicas: 1
    ddpStreamer:
      replicas: 1 
    streamHub: 
      replicas: 1
    accounts: 
      replicas: 1
    authorization:
      replicas: 1 
    nats: 
      replicas: 1 

    ## Parameters for each Kubernetes service
    # NOTE: reserved for future usage still
    presenceService: 
    ddpStreamerService: 
    natsService: 
    streamHubService: 
    accountsService: 
    authorizationService: 
