encValues:
  mongodb-passwords: "AgAxynQNQcw786QJ0yW3yZgWoH/TyMhF/w1TVG6Jua9a6LZtlenaUIoszzN/FsRMmaMSifecLm621khMaVsts+SGqbiZn17SsLWj8oADkjGfHcSh6cSPO4z03/WTIYVFBV0HxVOLKSDqZ9Iya9s0/jmCLaUDEM1IK1nGPrx3uTM+lLAvnk08Pfo1dDYatE5aV90TOSKYHuob8fI0b2mnhgOEM40oUMiasCx9Axky4+NgwTscWWEBCQHqHZ4QNceYRqvUI1DYu5Cv8NrbUoSzX497Ujg6ugUsvolbj5PohhTMtnSIZW0ONKMmdmlk+Yxuc38E/djNLilHX5jhoFiaO/ndmiuiPBYXQ9oQoUIOUVfQlkVH5LKc1q2c7SvwTW08W7w46MdKDQk6SUuzTZsOugEktNltvtEt2nXkIVAGfb+BXf5jXkxMBB36XzO4f563GBnfplw8F3CW5/shKDTpL4gaXXeVIFFfsZZG12QdBvnpVBlwAU4MM40ez+hFR0k3G3rP4l6qR+FMrelDyPcfr6qcGZ4OUP/W/Z5WBFBHY5PkDMDYkwjyyG1MENR6LcusGQ9xy69T2jANG7Vkorvo0CUey/u4LJTtfthBe82Ru7c2h+8PGK73MEd2bPOaYkFHH+1LL333oingW/SPW4sTOn0SENM+7QB7FOWulfpEOwFAvDy88XrsRYYozRmUbK7WFbv0Evo+4fkec3U="
  mongodb-root-password: "AgAxlEDz9c+SVrrJfVdKL6SPYT1XCdEljjOx+cfs6R+BUcAtAXIXnbOiU0kvG1wEyJ4dLqTz3nxi4EsCJ9tpotXyPPMV5scqXt9Kbpd32J7cH2IbcujpINDGlQECkFDwFRBd3KZxXCOHS6oFsm4klhGeE9Pf8ZIw95DIXw2A4xq+Om2AE95e/pzqzVJArAmVdAk89vGG9j+UyQLF25Ro7OB8lCOUOCqrpuqehBcdOr19oT7NH14YHZrOsHAf9S6rQsm4vBf+FLNcqAYomlGv+4v3DzgVOqKTq0JU/6C9Gc1+Z9TjPQvYiCU33o0HxRsqsIW6iNkzKF5rirfWNIXEy+51CLEJ208SFpX3RJOzDjWGCgjmbroZ1sMm0OLx0kjGmhA+/3p4eOWbBfv/QxzwD9qXFbWrq0X0ni1MNVdLV9CBiL6VEAcofq6v0FrvGEmYTf0vrFsUA0a/nKm//FXDM2vgVXrhDN6oIeq0N+xGiC8eA2EYoJIvstMuBHuIEQ6jUxPmWwMsYgxSzUYO37HE+b6AYBVh6MCE0K8cTeWynhM5cLeEFFs5b5owGFdc8DVkd3oTElNyXfihtJeTiSoiltmwvfVSNZvs//hI5xCe9GjgkvhEBU7lNtIVNWIdXTdH77EuXJnKsMCL2R/HnwO56KKSicfy2/nz0nmSMbaiLJ+i6vABW9zhYXv5YhGTria1RIRE9TAggqmx1G0="
  mongodb-replica-set-key: "AgBZCglFcUtmuBJ6q5iQQ5u08oHcXnt797u21aysZ8AilEZ9KKJefP8W7C83PTOBs6DE8iPnRfpNaBBRUiA1FAKEZ+Es2ECtsA6nteJ4QeraqolHLkx0uI4/Lmz7+Yc7DCKvyda5yvBEifA81mldwe4KuMzRdKaz4MBf4ad3z/4KVw7WyRaxWxsXOY7y76rx25EerwX1DVULfbQEpE7F0kqHhkWGKw725gVSRQBfrqJVFUXOhAGbybNZrAFWHIPphBU4Rnrl/fabpjZ761UgxZ3jchp2mppE7oQt4LsVqedk4unVnXWdex5qZzJqmMSZnElWDfl42pSYtEoYu716XgXEU7PLGzoKMMfYSjbg/19LwpkHXz5yf182MTRZhXTcD9CWnfLv2bQs1p54IUddHoDKI/BqIV4/7dRnUgOXkfu+w10fykZLCgnRKisYdeLayYU3MmDt7perIAEzktd9ITX39Ex/5uDOsppIy6WL833FTPK6MR7OuMb7Cj30WZOipr2kCHtD8zy6SS8bizuvqIOwhsEMPVHqKqz4TdfZzggHjImUmOCtHkLbNWWhyeBKUE7HKd5f6JoZDNdrTXzY5Rz/AVqQ57u5ZDZKntR9CHoMSQHiyvYaHvhafdNrCDxs1R34OxRzoybAS1Jlgiwn2tYQKBXGoqPU55subzp9tuMIF9x70E7SSMbOoGltQwPbGyKQOvEj2eDMfxQP"
  mongo-uri: "AgA/DsMEwPEe7d0Px3zuci5k+tDtTg2WO3rB/abZlV8AlRFdOrfwnvWq1EaMzO+ycmfY2mik+62VaI5vJ14XquFOomvI9peGrp6tPmG7rRFLpbV0lMw8Rg9HHCHijcEaGIguig2OmGxvLYOW3f+pYAoke+yU9karEQiI2UHXGRJ/o46Wt4ORNuKBquEeWfVfr2KJ9UJ+Hk2r6Ulv/IxYdwsmQ76VRvE6bmZFwPvQOJiAPbrTu8hvagC40bDiyZmxEx6ttzr4LoCzjE8XsYDUCgAaw10ilI9rBFl0Z29P/FXbpz3BuqfEB7jQJfHOhVuIkv+izagi3eqtQ/AysmqodZ9nmSRCxtTRLGkWjnUqZhIQxzLLjqLYrhk5dAU7dEupUjRwiZgSHQlovVJp1cVAm/pldgM3RDaq/gDZDD1KCV95/LqHyn4q+IQH1As8WNQcd8n9HhQBW0bFQwCVDNtKwLrMe3XQ4W/VQvjiD8c1EmGvyDb/1tVTi9h64mw6KDZh1Q87JvGUsS2qhJ64+H0IbQb40fZHBg5ps3Sjgh2BTYQE5tVdhdYKr2ASWHg0D31+c/uD3sPTFOyZE0NW1KcG+NXiAnCKksBsPk+AOF54n41Xo819JLuWn44f4zL5PMTbcgh9UHaPotR0AA/SWgU2YnMKWifkb+3zjEQjjBnghk3/rK9kNenrweVhGmHwI8ESx0EyYyycjDVLA0jocezGva5B57zR5OgYsX9Fuhe4HDhPaSYVWnhwaiGe/fx9rfzUYKmYzX8E4w2ITZWTQLeAcPlRH+4AZRqKr5iZw+DLSF/5CuxWwRD+DwdSf+A="
  mongo-oplog-uri: "AgCYgcZ/GrVuj2aQwxPcjDUQdROB/21G8rTnS11bTlP7sW9poVWEb1sH7v0JMXjtlMfCEMr3cVs6RXhHH4820SgAAY7SDEP1GCjXOot9thd7OaVGwTwmKlHVdjAMYc8RLmqHzl7hmudr4J9czoQxcNGWnxf8mkPQPNo+KlL3GdW2sV2Ony5mPOzxPUF4lHwIJFL4cZUGIOiUvTOhssBFlTQSiDGZ7B6q2qmsUAcDw8kUVH/tujkDBefMEAlx8TFgmSUZfa4PUqgwFHL/dwcQDPVub9lALGPgWnN+Q0Kh1JIjlWz7DO8zQN/ryW98EnBqd4U11uwOpgrhb2pGxidT/AMse1GmIJCjxf9mi0iruhU8AxDlY2YO+nYNNT/0cpuaOe86ZfECtTgYNhtAn2dXorqFVrXMLFTo9NYfU9w7PkRKIOUxkE8mMRWXO7Ht40NrLJsdUWitfzuWjs7MW9pBdRTPqCBaW0F6A93ecd+blsdot/mJdBUSnKAGrdW0qLZt0qWXG00sKruKYb1kwpXpqUbvgoInqTeGDyY+ZpWppZPHAjKs93U3Q3NClCI9q49GEqyLliOk540c93DDg6MF84RSat0mkRnuB52xpOV7cen/lPEo/ig0eH79jwuKs7o5IXJIe7vs0U/Qfo1AQh5EIWM1YzidWIr9D8ypfLsMuWH0IoB6yaHnizuc2GjaMqOG5h0gEDffQXTpcFI59OdK9ZJuQBOA4NB0aHwi8u8NzZY4nYrxujYPu+ZWTEPjg9OOxbvcUIDrBM8jch/wIN2hnPCPxzJISo05oSjJzYpWQN45QHocvGKxPwjWzs7aom6edu8="

velero:
  enabled: "true"
  schedule: "0 1 * * *"
  # Template is the spec that should be used for each backup triggered by this schedule.
  includedResources:
    - "pvcs"
    - "pvs"
  storageLocation: default
  ttl: 720h0m0s

rocketchat:
  ## Rocket Chat image version
  ## ref: https://hub.docker.com/r/rocketchat/rocket.chat/tags
  ##

  image:
    ## NOTE: for microsservices, those two itens get ignored, 
    ## for now. 
    repository: registry.rocket.chat/rocketchat/rocket.chat
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  ## Host for the application
  ## set it to a domain pointing to your loadbalancer
  # host:

  replicaCount: 1
  minAvailable: 1

  smtp:
    enabled: false
    username: 
    password:
    host:
    port: 587

  # Extra env vars for Rocket.Chat:
  extraEnv: 
    # - name: MONGO_OPTIONS
    #   value: '{"ssl": "true"}'
     #- name: MONGO_OPLOG_URL
       #value: mongodb://oploguser:MONGO_PASSWORD@rocket-1:27017/local&replicaSet=rs0

  ## Specifies a Registration Token (obtainable at https://cloud.rocket.chat)
  #registrationToken: ""

  ## Specifies an Enterprise License
  # license: ""

  ## Pod anti-affinity can prevent the scheduler from placing RocketChat replicas on the same node.
  ## The default value "soft" means that the scheduler should *prefer* to not schedule two replica pods onto the same node but no guarantee is provided.
  ## The value "hard" means that the scheduler is *required* to not schedule two replica pods onto the same node.
  ## The value "" will disable pod anti-affinity so that no anti-affinity rules will be configured.
  ##
  podAntiAffinity: ''

  ## If anti-affinity is enabled sets the topologyKey to use for anti-affinity.
  ## This can be changed to, for example, failure-domain.beta.kubernetes.io/zone
  ##
  podAntiAffinityTopologyKey: kubernetes.io/hostname

  ## Assign custom affinity rules to the RocketChat instance
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2

  ## Use an existing secret file with the MongoDB Url and OplogUrl
  existingMongodbSecret: 'rocketchat-secret'

  ## MongoDB URL if using an externally provisioned MongoDB
  externalMongodbUrl: # mongodb://user:password@localhost:27017/rocketchat
  externalMongodbOplogUrl: # mongodb://user:password@localhost:27017/local?replicaSet=rs0&authSource=admin

  ##
  ## MongoDB chart configuration
  ### ref https://github.com/helm/charts/tree/master/stable/mongodb#configuration
  ##
  mongodb:
    ## Enable or disable MongoDB dependency completely.
    enabled: true

    auth:
      username: rocketchat
      database: rocketchat
      existingSecret: "rocketchat-secret"

    architecture: replicaset
    replicaCount: 1
    arbiter:
      enabled: false
      pdb:
        minAvailable: 0
    pdb:
      minAvailable: 0

      # key:

    persistence:
      enabled: true
      ## mongodb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 8Gi

    volumePermissions: {enabled: true}

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    # existingClaim: existingClaimName
    ## rocketchat data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources:
  #   requests:
  #     memory: 512Mi
  #     cpu: 300m

  securityContext:
    enabled: true
    runAsUser: 999
    fsGroup: 999

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true

    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  ## Configure the ingress object to hook into existing infastructure
  ### ref : http://kubernetes.io/docs/user-guide/ingress/
  ###
  ingress:
    enabled: true
    # ingressClassName: "nxinx"
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    pathType: ImplementationSpecific
    hosts:
      - "rocketchat.dev.aeternity.io"
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

    labels: {}
    # key: value

    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP

    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000

    port: 80

  ## Optional custom labels for the deployment resource.
  deploymentLabels: {}

  ## Optional Pod Labels.
  podLabels: {}

  ## Optional Pod Annotations.
  podAnnotations:
    {}
    # prometheus.io/port: "9458"
    # prometheus.io/path: "/metrics"
    # prometheus.io/scrape: "true"

  ## Optional Prometheus scraping Settings
  prometheusScraping:
    enabled: false
    port: 9458

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  podDisruptionBudget: 
    enabled: true

  # # # # # # # # # # # # # # # # #
  #   M I C R O S E R V I C E S   #
  #  Only available to E.E users  #
  # # # # # # # # # # # # # # # # #

  ## Deploy as microservices?
  # Monolithic architecture, by default
  microservices: 
    enabled: false

    ## Parameters for each deployment: 
    presence: 
      replicas: 1
    ddpStreamer:
      replicas: 1 
    streamHub: 
      replicas: 1
    accounts: 
      replicas: 1
    authorization:
      replicas: 1 
    nats: 
      replicas: 1 

    ## Parameters for each Kubernetes service
    # NOTE: reserved for future usage still
    presenceService: 
    ddpStreamerService: 
    natsService: 
    streamHubService: 
    accountsService: 
    authorizationService:
