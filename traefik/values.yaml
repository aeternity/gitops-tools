defaultCertificateDmains: []
traefik:
  image:
    registry: public.ecr.aws
    repository: docker/library/traefik
  resources:
    requests:
      cpu: 15m
      memory: 64Mi
    limits:
      memory: 96Mi

  topologySpreadConstraints:
  # This forces the scheduler to put traefik pods on nodes where no other traefik pods are scheduled.
   - labelSelector:
       matchLabels:
         app.kubernetes.io/name: traefik
     maxSkew: 1
     topologyKey: kubernetes.io/hostname
     whenUnsatisfiable: ScheduleAnyway
   - labelSelector:
       matchLabels:
         app.kubernetes.io/name: traefik
     maxSkew: 1
     topologyKey: topology.kubernetes.io/zone
     whenUnsatisfiable: ScheduleAnyway

  deployment:
    replicas: 2

  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    metrics:
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Pods
          value: 1
          periodSeconds: 60

  globalArguments: []
  additionalArguments:
    - "--entrypoints.web.http.redirections.entrypoint.to=:443"
    - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    - "--entrypoints.web.http.redirections.entrypoint.priority=10"
    - "--metrics.prometheus.addServicesLabels=true"
  logs:
    access:
      enabled: true
  ingressClass:
    enabled: true
    isDefaultClass: true
  service:
    single: false
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: external
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
  ports:
    websecure:
      tls:
        enabled: true
    https:
      port: 10443
      expose:
        default: true
      exposedPort: 8443
      protocol: TCP
      tls:
        enabled: true
    metrics:
      expose:
        default: false
        internal: true
  tlsStore:
    default:
      defaultCertificate:
        secretName: traefik-default-cert
  metrics:
    prometheus:
      serviceMonitor:
        enabled: true
        honorLabels: true
    prometheusRule:
      rules:
        - alert: TraefikDown
          expr: up{job="traefik"} == 0
          for: 5m
          labels:
            context: traefik
            severity: critical
          annotations:
            summary: "Traefik Down"
            description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"
        - alert: TraefikHighHttp4xxErrorRateService
          expr: sum(rate(traefik_service_requests_total{code=~"4.*"}[3m])) by (service) / sum(rate(traefik_service_requests_total[3m])) by (service) * 100 > 5
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Traefik high HTTP 4xx error rate service (instance {{ $labels.instance }})
            description: "Traefik service 4xx error rate is above 5%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: TraefikHighHttp5xxErrorRateService
          expr: sum(rate(traefik_service_requests_total{code=~"5.*"}[3m])) by (service) / sum(rate(traefik_service_requests_total[3m])) by (service) * 100 > 5
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Traefik high HTTP 5xx error rate service (instance {{ $labels.instance }})
            description: "Traefik service 5xx error rate is above 5%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
