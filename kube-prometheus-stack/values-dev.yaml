encValues:
  github_client_id: 'AgCE3nhyUMWaozmG84hFNZbdoXo3bERxLOzNM86scOPBcQxvqyjHUYuBxkBGpMxvt5GoHsNseahRMB4qTYRmYRdNmOYv4Qwgu6ZEqaG4c/HT6eTsTPFAqWcgicfGA2gDZmvq/67juHxenwHe97rWX703Fox3S3yocGG8Ihm058748aPrtsZdit91uJkb36edsmjGEh7u9CV+izj9Xt5lkc0rYC49oTEUEgslyvDLq+6gUGQRqnicEEdLhBXIpR9X31EEJoWtoUbT/Vkyqxe3uOc1pdFLPmdTwixFDbkcWO9gEh59DMilcsaIm7xZ9FpdB18W5SGa8WG/Ac8ChH0xlLhFc+VHsqQPFPi7f+/1Y6tKV/wsrJSc83xqAXQrHZojE3n8KGo+ZcI86PdTvBZXDraVpOJbBp/WeemMFrFSdqADnIYV5Ymfa8ZJdWWNE18lD05CrvM1U5bojtjiKUxmDryOq6wOn02MVHr9KkvjbOYn6wxwEpxqtu2X5jzRRCLmBo8v0kh6wBXgVFQqU2b0oRfVQPVJ1N2OUcLkobyRLw6V49azms7YKmyvnT7n5pj17Vc6eLPK5bdeNRV6Czg2+g5fSCT2AUDDusqFSsg6wkRjI1XycmmesAgWNiGiusH5dIOMjaBq28amAs/+PkeGndZf+pu8ufH1NLeViDu/FYa4Qm+ek5Tv2b8FD0XVBeYrPLfqSo0iG4btrFveiBluOixak2sP0w=='
  github_client_secret: 'AgCJFe+ubDLMGhqZli4ZEWqx/NfcHyWOPxKDA/YbPOS83X/DKE7hIbH5Zcr8BT0Ezlyv+HODli8AzBmL0YwhDXE6MNiZSLQHo/8rMRa7NM6Vixc5sTrfC5dxMJ/F2HvZxdOK25CBfi7I0xDkyLj9NM+UoAYbgRsB6j6SUtdJRMM44XVSkLu+vOH2LEex+ExZHJX2TAzry2L+0KiAImetkCexwEq8f8/44Fe+Jjrie/HfxINxiGh3QT39RYTrIpppIp/aPgFNOsh1gbcx2Z1ORtMEWHP4aT9/BRl3aXoIw3d/lQvOTFqrGvK8J9yYXF/DovECqGfIM4bUBBd6ua4zE2gzmfhN+9gPQTzplbwz0m29jmDLJE+VsdpW4B9swU0913yOXDcY9DTfjrsJQaRYt549dWBTjEhF8OqCGQRleBDPNF+HGrRsHSEeZmJWQq98tKkR/Fq9YekeF/b9MtVjx4TNOW7VQXtmAQZf/FhY9uPAFqM2Zoo+lVhQj9wGAJIuWTWH8YarKf9GOyTlRmKpNVMHtB5Zox9jCmzi6bE4C7Je3raEJs/weUhasMKKCplvb5/iUMqxE2pM76A8fOPwhRraTOVGo2oY2fVmiZ2YPrSGCB+8p4bSh3tmzjvEWVWvpYZBVdLdL9LK1xTba25oB78VIVgQL6FL9Pc2yjDmsLKvUQrdA4fooESWB1z87PPLT0f/Ore+9BYsSsaXse1Fp/KgaRPSlTrjLDwhixXrEzTe6DOagoYuRfcv'
  grafana_admin_user: 'AgCgt3p9538WpbCjY9C77YILQPnCfuuEv1dw56UH2YmS3g/mFOIewX2JanR6kWg9WMyUx/qJv55zkwN0cgLvqNuZ9fMamLRp44V5PxxLajjLZoQiKvq0C8ux+5HdZ09RMFbA70jJgOszkoQZd3IvxHvrbjEKvc0FNMhvmdsuWWcQV6XiXZ5BiCXPROR3J8Zid3iXHvkJDVg24ACLwI6ISGcumXntmaMSkbI9tVmTT7g/hsdobsTz5OUROVHU1npl++r23U4jAkWL7Yise/fVW9/MvfW2EuVtWYvyXAh4svsh4+VQoPJdkT8t4x4ikRrEwj/AO6dkX+tjMGMg+z1o/3yzopmbLNuhg47QYzgLwWtGuIjd+vIsjy9wgZYp7H+uqb2920lFU3+/e2jN6DXBCxuY6FkXw7UJd1RNA/943NquJgTT8foVwR3iZuISk5yoBDYwAdRBPdpvAg3J2G0xJgfBZk4rdbgPIMrjJ6sclrxNVMI3B7GqsVR66mZG3nbewP9j3aVpFiRAyFixTWD8cyLu1wqcScCmU+c2T+ECnGfiKSdqbY42FrBf6A2up2PbXOVORuX6Le4WJKIcpmgAA44VxHw16FDgFt48zvtRVhK26Q8mbVjZn3qQO8OC4RIzvsigSfMdQWO5reqljqwPptziXv7KyivcrEHJMHXv6cGctYz0PvBHepPnWavSp+QpDaB/k3EGGA=='
  grafana_admin_password: 'AgB9Rb2+8uBUdrcSHIFFya8O8ml3blwKx/gnVEpssLnMQOMzYiEedStCNIY4/mbJauJr2oK2tTeqRi/IyIBfpI2g1yxGQTbbW16BnyEsgpYCFnStkB5wOVdcJVT4H2Q8Mn5DwTKGTYxLfF6ht+FUnwRGH2XAQIVM+6pTgIwlw3oV/7QbbWGUxO2vWWCtcr+C2hLuRlT0gYdYauWKBCuNFRu9b4aLRKpRa+B1QWLMCaFP/gQYZloariOo7krf5X6NMPhj3psQ4qC/WH4mrrCkf95qHfQlHo6v86chGElxixmjZv3xaqf5k6Pcmp9T3QgAvyOt7AT8ofxUT8m5RWPbNFYL028t00q+f+bs/cAQV0VD6bmQnD6S95LVZUcBKnNymZkJlN7CZAX6rEOIEMQGmDNTR6BrcZPA7jpo7BiAvOXRVR4L3lUt75cb12mZNIoDA7SX8oTDVJ6I39jbOYDdvWCoGgU4e79US+coAmaaf1oJBhwY3SqFCqjBDfWdWROnx8Rcz0eGO3IXm0WC5X4Ca9+IUZbRHmJMbL5wEyRuDSvid0ctm4OO+nfqXocqjaUfJp0YhHWH3Z7A9VWJX8pvKEgao402lxLaPmW2Z70/FSfGevWkE1V3DD70OFCnRq+fuew0kuN0OxtLGC/GBRyhR0QBv764u6kg0R5VnvJ3t89cvpcgHBOh43IPiwsEfcSq1/LrhkknEFflQ3MfyvLfutrEsP4iSaw0Fuw='
  url: 'AgCHzaHkJriuLggdbyp1pv4NnzKVjCp83ykOI9jtUCpW2c+fw42l3oreyDgfGmLuaZyJCwwmVEyaZJy8IlDFSIxDfiy4aFhhaVRUAoqtopADGoroLVDgVpGAeMhx8sAidw+JPJL1yDaGkTFWqiX4GxNZaYCTA60+3iwk/qErMTTTI6xwfYZDhAKtBAOzXRo6x52gB66/E/NVM2VAWB7rrDPT/blc/fvC+DwJPbLrRkLPeD5W4z7/AmfVXOUqsIpTDb9Eflk/k+Qzz8hx1YmZrI0cYDJaYqdHwZEi1UG22GxLj2uhQ5vLlboIL22j3MlqbFPJS6z8XvBdBXWlfRREQ0l1xmg5OyOVj5YGEh2NKVEZ7Twt4YmmzW0t/2fwoTdbYhhTsJJ7rcx12MDKxqRQoVPyY6CPGTVzwYcEyfChK+PR+Ztj3pCDowFvkGqj36diGzgXbYEoX5NoYRR15OhUiKnC13u1Wocv+Ie2rGLWsGbO9/Na5zbtEdYQss4kV7CLiyUuF04nfQRqwQTx1qEPrYESOCqDNT0b8gtLr/GAf+f9BDLyVOnJWnGE3dVSZRlqsV2p2CyIgeTCCr6seWEHHZWmzfhObhY80OKuqyH2NVgHPJVrBwsL2I2S5tDWV8OR7xUIiakUaB4fQZVQ0zxwxnOL/KG/AGOCTv3gNBpzP8fr9bVRbiMSB0DqBwoOFpm6yAT0kBYBbuVGn3HJNQc6bv/HwIOFze2u4y3qW6m588w9JAExF7gINxT7v4reEp3Z/wiaMpDSM43FOWhkIVwvJjIANXkjJ/biTpxo/Cg8IY5DZGQ='

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
        - job_name: redis_exporter
          static_configs:
            - targets: ['10.0.1.13:9121', '10.0.1.11:9121']
        - job_name: node
          static_configs:
            - targets: ['10.0.1.13:9100', '10.0.1.11:9100']
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.dev.aeternity.io"
      pathType: ImplementationSpecific

  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.dev.aeternity.io
        root_url: https://grafana.dev.aeternity.io
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.dev.aeternity.io"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.dev.aeternity.io"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.dev.aeternity.io"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.dev.aepps.com/health/backend"
    - name: elasticsearch
      rules:
        - record: elasticsearch_filesystem_data_used_percent
          expr: 100 * (elasticsearch_filesystem_data_size_bytes - elasticsearch_filesystem_data_free_bytes)
            / elasticsearch_filesystem_data_size_bytes
        - record: elasticsearch_filesystem_data_free_percent
          expr: 100 - elasticsearch_filesystem_data_used_percent
        - alert: OpensearchTooFewNodesRunning
          expr: elasticsearch_cluster_health_number_of_nodes < 1
          for: 5m
          labels:
            severity: critical
          annotations:
            description: There are only {{$value}} < 3 Opensearch nodes running
            summary: Opensearch running on less than 3 nodes
        - alert: OpensearchHeapTooHigh
          expr: elasticsearch_jvm_memory_used_bytes{area="heap"} / elasticsearch_jvm_memory_max_bytes{area="heap"}
            > 0.9
          for: 15m
          labels:
            severity: critical
          annotations:
            description: The heap usage is over 90% for 15m
            summary: Opensearch node {{$labels.node}} heap usage is high
        - alert: OpensearchClusterStatus
          expr: elasticsearch_cluster_health_status{color="red"}==1
          for: 5m
          labels:
            severity: critical
          annotations:
            description: Cluster Status is Red!
            summary: Opensearch Cluster Status is Red!
                    
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 80
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 80%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: dev
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning

