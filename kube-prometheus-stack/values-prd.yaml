encValues:
  github_client_id: 'AgBxmaoEleJlopT8u5GCuC86pOssH21PgnlrsIP7tDAKc3oquCfMk/RofxO1Ed0G9sIVfWGRkVzNjq5VNUfixTVjr2dfMJe0lMBYROttPeM/JM+Kwh376w28KYnDltfSiTVkn+pu5LKZRvoY0NjARnjT/07xvXVeAjKmfkZUxEmj2mmo7vm5hd626UVid1QBLJEOeTxDX9LtHBCk4fUbN3DyCGNCr66ixOon39OodSMLzr1oJXdZAgpz+WJm2M3KAWMNgtzhzt12D8gahjUDcDhLEvfgbBHTHol865E2VJXRm1uDD1Q8/TgstRxu/D+VALqWIZUtdR/tw4+xx+/9IHoViaqgtY5v4jlC1ePdEzDfL+s9U3sKdSzynrgNRVJtMnPDrV7Q5baUecbpoD1NnXtDMS8uTjf4FBDg2Ybtlw4GFAEdeQuMIlMBJ6xeH9UrnlfQmNc6W/iuhtsclF1nDoy6YhfKY2Mu9sAJVENrQmymr/NZlLDA+OJQF3S90mgry/REFC5BMNeRdwWRqu82JeLaFpfkeeLDHsq67Bh3wlGuQTZDJHTi0T1d8hFAJk4FZR/Th4ijVEJPuvYfVVQgmSvxFopgMOfYoMwRxy1hjB2ZaaI+6QBCbAa97S1gb74ky7oPFo4kQWxONLMe9haLam6E2Ya6LgHmqghHHsJPJVhH21DI9CmM4xTgVj61HTRoaq8bqh/39Q6qmFbmgAGI6eDLUnYFYw=='
  github_client_secret: 'AgA3SGAnhzNzdWzkDOb1+uduZprDmMGFP4UylnxuPZbfPeqQpkRT7+eAAFWewqip03H9UgnJsaG8S3hkpn6yMs0m1J3bX/v5AXaV3McGJumOUvVPmKy5Sdgu5/OovG3a8hD9aCOzPDxfbSr9JqHbcmbMtvcUCi/RKJx3VWMMaFXYstbO0PHqBCV39kYZEY3vyeLwtBJmN6tcebvzw9B/fvOhnVXAVAyy/+rf6o1rksWoyKftWjD5YDbPQYXaJzQSBYm7BZWHUqkYuR8aaxcVAj24XgT1R0hKveuo7miyRb3wjFiQqSHGqCDj3oRzCNC06SaDNT8fpwZTt9qZXXGx17MDQufpMEGLKe7/fV4P5MOt3bpacjGi7xj5ZXQ7XZASzPzj7WBarVVdgphZNkCS/WbR7bXHp6I81QOtR5z/ZsEvMqPGPZlDcAlqv7DCcoH3KALVDTSjIvSocEe0emTcJgHFV7JmCsL4JmIEFi5VSnB8z7ou3RdQHW8ObtJP+jSCel59nTc2S4nZBUY+ToEt8IkfyxcDnTNretHZdht09JhaZABVoNx0gdZFJ5FuHOIUL7XZcwAZOz+3/jcsxiOQkTsxuknf6p5P5saojVmO1C18kUVnUTWba9xQSYXsKXoqeNigKJUUpxd0oCHYidfZWgWa+Kl5p95M7wYjjguCkkzQVv7OB7bDtWTARTs0aPPnhb3BPRcoGnnFLsvl+pTBGOPare3ogxoPzzt7SNUZQqLXCYLB7MsrtXOm'
  grafana_admin_user: 'AgA2AM0SVscnPkNC0oiaiGpLXmyM7jw+34m3I3JO+YG8McHu1sE1xm4wIbCxIj3aN1CtX819Ly8LGeKnGO3dib7G3H/L+rFVT1vKBqH1hHML6/MbDQa8tvkjDyqeGFmzGq1EtUSRfsBluO4LzHAHfcorcJKR+jtaxEik2wlbh8wDPEkyqnQdu/nQbbmL5ZZMUnHEbfQ+2eU62QMdS7SzyZM+knstJDYZJp59mRTpwx1TMbZryy4sZ0sOsXmbFpthaQN5gyjHtItrbFafxz7BqBU/PhXO4FXIC1RjTXzcqi6+5MD8tUtF9EX/Zi1abd74mBjqyCd8YH/4VdUa/Nl7l/+KXgN7i2EPXZXWKABPBXDVV9F668QIDazINDQNFQ779FItgvvWdVQLzzQoFjsbnnYzLCfHLfp6sygb2nf33nJhPcRSPRprb78qIMDuf9DF/rrHbQXZzKSxcffPDxPCe0mkOCtpsFbDdjMjwasmoDTvXsGYucvKVPslegbuzpcrI29Iv/pm04SkSnPA4ZqH5AV97tBaGl2qkL7ORzBqtKwKh+5IXZc+AqTEiHY/fyMHWc+Qn2MG4oqFhXseGDpHi//vtFrQw9UwWb2TQaHIQRNMSd1LKR9y+p3irsgISSnfJjECXUOT54MgmCg+faplvcSmlryTfiBZooVXQyy6dP4VU40cQxrLvn05QYKRuWtQ8puBIIhR6A=='
  grafana_admin_password: 'AgAD+akoAlVRD1py1Rerc2C++eTL87czYQgQrPl63ZE7POtWr4578WQtc4GC5vjpB/RypD6+cijIpGE3CHVDb6PBmC6Mxmev+Sc8hUseHzl8mlHAjzMUiDPYj0Hv2eq7on5j2V9RntX/8GWxjXHNLwIRmCKmjs82BoKLkwHfgV4O9+XQnkV/N/n+eK4TwBOsYdnvawNMwZ5I4LW3DhQCckKFQ1y3wWedyit17jo42o9nrSokEYFpDJlDukuB9+qsKM4h3tJ7Yf1wAAINVttnsGwfKCJDiCq4B0uAZ5WVoiRXHlzTwTomfPzcUoJRzyEA8TdU3OhWLRX9375Q6BfSmsmlNAeejx3DLp09qG0zIOALffHd19rQwdStiTHDY/SEGUBz/eoQgpZ0v4RZ9IZWYr4xDPq1qYs9s/9SwmQJaqCylt1XD8pS2XaBbPGVg7h+r4YuWsA/X6Ugg8VMUYFxya1AqV5Xww7DCUi/r2+BfpUEv3an+hN34DK2Jq2umPuCQtG7FHLLJu+dZZJMcs1zvdh5Bwz2owqzi+EaXKfs7UBo0CVBh0mPzVHDA+3nbNlz/fgfjBExaWnAZc5op3GsSRCU0X4W2zgKdtYb9rBGq8A95M2rgJ1cT0opYka8DJtCsrjKE4t/Jlz5pxpNtKl4pGysWCGPbbYrufPITF4HgiPtlr23htBFjabSwb7eChiLXyvUR02d3JcVTUYMnM46'
  url: 'AgCSTiLJhw9HFqQTkGklEWRXPucHtHyF5+K9Ljo/KpAHyd5Fcg8FA52nHuNafS+GXTCcan8+QrWWeLLbi+h25KUaMoc2iXgbixbi6YOMYigby2vlmq3qOnvn+CnlSRPoCQcZG1NoJ/Ali3VFMj8cV1wVykGmTOWGJDEzPAInWcs3yADPb7O6+1izB7OChhWgDGXb90atnHiHYmCb2l0DKx7XxboRfBMKQmymLJAPCFeRbRICZEuVXbuR/Hly+Rup/WPf+FbBI3KKQN41jbSdvZwyW4HPfZg1Ig5v7is9q9pPH8tN/YvVS4gygtZXiLJxUsxR3b4u6OnhkS4CINSD5Cfif+BOdjjPDq5DPhXSdFlAH/bCdxw6tEvYoZlBsIjCU7kj0yiQU7Bvy5k2uECtrLjlEf2f/E6pJwDYP0iBC47QpA81UdX092IeWOKRYCtd/9DuT2tKemuXPWUNFHzWZpkJS5kt4fwKVqna0bBWvv6MsbkddILFVBoP7WKyhNfKnn2ox9VESJ+NzKadsJpYr8ifQzA4w2lkAYibGOm9WBoW2beIbNn4xL5o5tV8oLuQqtFVbXQxxpdQOXk/xr35s19y2pD/rvgZ93ER5h6q83B+4SxXTf+I7ZzXv6vA+X/QNYuz6j5fKaxuiFUOb/CpX+EGasYvyI5gcFIiQzuC+XPgz5xuIw0beFN3YgbAk5+kq/uSdVKBJFmQIOKYAtT0ZiVTTd36f3KYZuz+WOybkEgrHh4inWstsG8E2a7ZFd1o69GX/uvZNpwpI6MUukvBFGK1DXJmtu4o/yCykD7EQkw0RLI='

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs: []
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.prd.aeternity.io"
      pathType: ImplementationSpecific

  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.prd.aeternity.io
        root_url: https://grafana.prd.aeternity.io
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.prd.aeternity.io"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
        websites:
          gnetId: 13659
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.prd.aeternity.io"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.prd.aeternity.io"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false
  
  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: prd
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: prd
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.prd.aepps.com/health/backend"
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 80
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: prd
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 80%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: prd
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: prd
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning


