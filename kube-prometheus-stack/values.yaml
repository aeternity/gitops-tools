app-secrets:
  external:
    values:
      GITHUB_CLIENT_ID: /monitoring/GITHUB_CLIENT_ID
      GITHUB_CLIENT_SECRET: /monitoring/GITHUB_CLIENT_SECRET
      GRAFANA_ADMIN_USER: /monitoring/GRAFANA_ADMIN_USER
      GRAFANA_ADMIN_PASSWORD: /monitoring/GRAFANA_ADMIN_PASSWORD
      SLACK_HOOK_URL: /monitoring/SLACK_HOOK_URL
      SLACK_HOOK_URL_PLATFORM: /monitoring/SLACK_HOOK_URL_PLATFORM
      SLACK_HOOK_URL_BLOCKCHAIN: /monitoring/SLACK_HOOK_URL_BLOCKCHAIN
      SLACK_HOOK_URL_APPS: /monitoring/SLACK_HOOK_URL_APPS

alerts:
  platformSlackHookUrlKey: SLACK_HOOK_URL_PLATFORM
  blockchainSlackHookUrlKey: SLACK_HOOK_URL_BLOCKCHAIN
  appsSlackHookUrlKey: SLACK_HOOK_URL_APPS

grafanaDashboards:
  aeternity:
    - dashboards/aeternity/aeternity-instances.json
    - dashboards/aeternity/aeternity-node-exporter-node.json
    - dashboards/aeternity/aeternity-node-exporter-group.json
    - dashboards/aeternity/aeternity-blockchain.json
    - dashboards/aeternity/aeternity-protocol.json
    - dashboards/aeternity/aeternity-erlang.json
    - dashboards/aeternity/aeternity-job-queues.json

kube-prometheus-stack:
  ## Disable scrapping unused metrics: https://medium.com/gumgum-tech/how-to-reduce-your-prometheus-cost-6c7cc685e347
  ## Component scraping the kube api server
  ##
  kubeApiServer:
   enabled: false

  ## Component scraping etcd
  ##
  kubeEtcd:
   enabled: false

  kubelet:
   serviceMonitor:
     cAdvisorMetricRelabelings:
     - sourceLabels: [__name__]
       separator: ;
       regex: "container_(tasks_state|memory_fail.*)"
       action: drop
     # metricRelabelings:
     # - sourceLabels: [__name__]
     #   separator: ;
     #   regex: (storage_operation.+|kubelet.+|)
     #   action: drop

  prometheusOperator:
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 15m
        memory: 48Mi

  kube-state-metrics:
    resources:
      requests:
        cpu: 10m
        memory: 64Mi
      limits:
        cpu: 15m
        memory: 96Mi
    prometheus:
      monitor:
        enabled: true
    selfMonitor:
      enabled: true
    rbac:
      extraRules:
        - apiGroups: ["autoscaling.k8s.io"]
          resources: ["verticalpodautoscalers"]
          verbs: ["list", "watch"]
    customResourceState:
      enabled: true
      config:
        kind: CustomResourceStateMetrics
        spec:
          resources:
            - groupVersionKind:
                group: autoscaling.k8s.io
                kind: "VerticalPodAutoscaler"
                version: "v1"
              labelsFromPath:
                verticalpodautoscaler: [metadata, name]
                namespace: [metadata, namespace]
                target_api_version: [apiVersion]
                target_kind: [spec, targetRef, kind]
                target_name: [spec, targetRef, name]
              metrics:
                - name: "vpa_containerrecommendations_target"
                  help: "VPA container recommendations for memory."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations, "0", target, memory]
                  labelsFromPath:
                    container: [status, recommendation, containerRecommendations, "0", containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                - name: "vpa_containerrecommendations_target"
                  help: "VPA container recommendations for cpu."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations, "0", target, cpu]
                  labelsFromPath:
                    container: [status, recommendation, containerRecommendations, "0", containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"

  prometheus-node-exporter:
    resources:
      requests:
        cpu: 100m
        memory: 16Mi
      limits:
        cpu: 150m
        memory: 24Mi

  prometheus:
    serviceMonitorSelector: {}
    prometheusSpec:
      resources:
        requests:
          cpu: 100m
          memory: 1.3Gi
        limits:
          cpu: 150m
          memory: 1.8Gi
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      retention: 10d
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 20Gi
    ingress:
      enabled: false
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: letsencrypt
      pathType: ImplementationSpecific

  grafana:
    resources:
      requests:
        cpu: 300m
        memory: 128Mi
      limits:
        cpu: 450m
        memory: 192Mi
    admin:
      existingSecret: kube-prometheus-stack-app-secrets
      userKey: GRAFANA_ADMIN_USER
      passwordKey: GRAFANA_ADMIN_PASSWORD
    sidecar:
      resources:
        requests:
          cpu: 60m
          memory: 100Mi
        limits:
          cpu: 90m
          memory: 130Mi
      dashboards:
        enabled: true
        folderAnnotation: grafana_dashboard_folder
        defaultFolderName: General
        provider:
          foldersFromFilesStrcuture: true
    grafana.ini:
      analytics:
        reporting_enabled: false
        check_for_updates: false
        check_for_plugin_updates: false
        feedback_links_enabled: false
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/GITHUB_CLIENT_ID}
        client_secret: $__file{/etc/secrets/GITHUB_CLIENT_SECRET}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
        role_attribute_path: contains(groups[*], '@aeternity/devops') && 'GrafanaAdmin' || 'Viewer'
        allow_assign_grafana_admin: true
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: letsencrypt
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardsConfigMaps:
      aeternity: grafana-dashboards-aeternity
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
       - name: 'aeternity'
         orgId: 1
         folder: 'Aeternity'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/aeternity
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        traefik22:
          gnetId: 12250
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
        blackbox:
          gnetId: 13659
          revision: 1
          datasource: Prometheus
        autoscaler:
          gnetId: 3831
          revision: 1
          datasource: Prometheus
        hpa:
          gnetId: 10257
          revision: 1
          datasource: Prometheus
        vpa:
          gnetId: 14588
          revision: 5
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-app-secrets
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      resources:
        limits:
          memory: 32Mi
        requests:
          cpu: 10m
          memory: 32Mi
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: letsencrypt
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}

  defaultRules:
    rules:
      kubelet: false
      kubeProxy: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
      kubeControllerManager: false
    ## Labels for default rules
    labels:
      scope: platform
    ## Annotations for default rules
    annotations: {}

  additionalPrometheusRulesMap:
    - name: additional
      groups:
      - name: sd-node-exporter.rules
        rules:
        - expr: |
            count without (cpu) (
              count without (mode) (
                node_cpu_seconds_total{job="sd_node_exporter"}
              )
            )
          record: instance:node_num_cpu:sum
        - expr: |
            1 - avg without (cpu, mode) (
              rate(node_cpu_seconds_total{job="sd_node_exporter", mode="idle"}[1m])
            )
          record: instance:node_cpu_utilisation:rate1m
        - expr: |
            (
              node_load1{job="sd_node_exporter"}
            /
              instance:node_num_cpu:sum{job="sd_node_exporter"}
            )
          record: instance:node_load1_per_cpu:ratio
        - expr: |
            1 - (
              node_memory_MemAvailable_bytes{job="sd_node_exporter"}
            /
              node_memory_MemTotal_bytes{job="sd_node_exporter"}
            )
          record: instance:node_memory_utilisation:ratio
        - expr: |
            rate(node_vmstat_pgmajfault{job="sd_node_exporter"}[1m])
          record: instance:node_vmstat_pgmajfault:rate1m
        - expr: |
            rate(node_disk_io_time_seconds_total{job="sd_node_exporter", device!=""}[1m])
          record: instance_device:node_disk_io_time_seconds:rate1m
        - expr: |
            rate(node_disk_io_time_weighted_seconds_total{job="sd_node_exporter", device!=""}[1m])
          record: instance_device:node_disk_io_time_weighted_seconds:rate1m
        - expr: |
            sum without (device) (
              rate(node_network_receive_bytes_total{job="sd_node_exporter", device!="lo"}[1m])
            )
          record: instance:node_network_receive_bytes_excluding_lo:rate1m
        - expr: |
            sum without (device) (
              rate(node_network_transmit_bytes_total{job="sd_node_exporter", device!="lo"}[1m])
            )
          record: instance:node_network_transmit_bytes_excluding_lo:rate1m
        - expr: |
            sum without (device) (
              rate(node_network_receive_drop_total{job="sd_node_exporter", device!="lo"}[1m])
            )
          record: instance:node_network_receive_drop_excluding_lo:rate1m
        - expr: |
            sum without (device) (
              rate(node_network_transmit_drop_total{job="sd_node_exporter", device!="lo"}[1m])
            )
          record: instance:node_network_transmit_drop_excluding_lo:rate1m
      - name: blackbox
        rules:
          - alert: BlackboxProbeHttpFailure
            expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
            for: 0m
            labels:
              severity: critical
            annotations:
              summary: "Probe failed (URL: {{ $labels.instance }})"
              description: "Probe failed\n STATUS_CODE = {{ $value }})"
