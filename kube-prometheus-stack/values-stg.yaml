encValues:
  github_client_id: 'AgB3lRZK9/MTQpbvFwF4TKYEUrw5W7FNKevjm0DOBoNE4oRYepRRi/iLdJUVT/fkWwf3x4RZSYA4FD1k7eF+2qwJ01zeVYiNNdu52wmTQHZvBfpcJgG3b3XaKiDMaNA5S2k8d9Oc9GoFIT4vb8aHSX16AkhvQuV61AHFMG5KItMtfAJlVyMec6BtTioUERmcwPk7jb9YrGblCuFURhhnqWfoL+e39jBmBwEXLNt+4t23atXYQul3nbmqf4smhmcbryLFIaZcj/J7aChXT1sP7SUMR1GkpPo2tWpwqnoPY3gUYUfpUA/7g+C3luJk73m6fY3vlPwcd77Xy2pnfCRjjvgUZtWveTwyfXqdyblveY989/3nbJF2phcT4SZQVdlCJX071x1cJs8qwKgz49gKZmtobvlwsfoB9A31/a6ALeYYziKrR6xWcArORxh6JubU4CL4mkRYtNeukJPOTIeeWMDJzvlUJF/gfhdvhkS22OBMQGgJZNL01HwJSQBkBdnv3yilJZWyZ5b9bk9Ttl0BJ+l70sQBPx8+AkP7DDGWUpPiGz13hJPLjKHLNNEYZp8Ds1CDHfVRpiCiha4oyVZHqchYcLRP+H9VGeApn/YuA9usaKfrVokaYMiwLtBvh1pF/Cp5H1RjBIoc4464P960MCSjxy1/F+BSFhlKPFEUfot4j5zgoKSEn2kqyxjsquMDeXpwmj4nWubnabZbaASk8ydfDqlYfg=='
  github_client_secret: 'AgCuWqqFhnttdqvICSW+pDzU0cVJfHFZBBmfFvs07QiSymFyQIyLGa3daKexvnPIy4jl03I1V3iAmlfwh9rkdXfhipJvloOOZ8ESzWNDGHk4tMhOgh+E2OG+ATMCbLb+ZVnJyNsOqQ6XBdM1bYnKLSfOeiO47Gf7e1jHiJ8wEe8Ay9QqJezYCZfBc8NAFXu3LxDS7lyXUK2GIs/7CFfknMcnsno+Hc+xSKwzEdF4SqNu69+VOSoYECG87Yz0uu6eqBWZ631IMdGoeTR0AkrNRPhCqTa9BlnnB8CHLN4VhwqMsp2L+JL/HCGHf27nPKPtGN4JoKLMv8MCVySw3tJaR54NMKt+ZAZyPNM6B0Di4rdtp35pWJZRxgK/Y+cV206k+eHa0HngU/n+cY6KJy5s43B8G/oH82eWZy6a8HyqMYzXc2tYg0OGXPeOyeW/gWE6dT2Nc+rWLgfds7NmgPakvo1vDUOnUMVDoJgUUtlt1nPaApyzTafits0HRMoS8hvd3a33GSKrg7eV/WwPNiaXyxJ0g3DRbu82mVrlDzt4dCJ/kiie8dGyLMX5qqdNg3XVgaGo1k2tRbthb4JaqN4BrAqH02S+yzwja/j5jguHN8fuqPDX+TCQy5kRuLwjPZ4V43FZsaNlTPkKfff87EXlvroz5/i+DMXdwQhOOJHMhtBCUZFSi28s6+Pvgi0sxkajX5hzB/XOJiKQQ6gP+DcG2euRnGDwDkjI5nS9Hp3Er3b2EklK7gp/YPl7'
  grafana_admin_user: 'AgCi7bnbBYHDIiIGkYhYsxxQMRFdk1Mm+TybE6Uj+N85QpEmb8fd1qL3tLBa0IbXCgwO4DZXx/Br5VtMx530g6cMdPU5w0NwpfQDpuL9zCW5YXEXkJRDv2nSkst0cIWRy94Csv3aTc+Uo0PsOXjFGPpbMWOgFG0J23A8DDOziA2xG8c4ehysvpZWtyPQ0RqQIlq1LjG8UsTDfwPGn829AajvIJ5yfmBQffdjvRnumsT2cJx3LxXl2+ibgWcvnCew709vjwOOauoL3Y72jHIdf1V/treTHcnwzyQhi/olvp/4S0mMnaEwQovyuQ5P7PlVnd/qvbViBPPUFK0mjUNSFsJXjP5bgfKUUu6INk11WEQoOGNfqd8F975OnFkVt9lRpB1fvGFtPrSsqPI/Pzlc4bKMWHQERwWUBfX4QXXYMC+PZq8C16W+O524q7d1dqWDpxd/rlhpSNZK+RwdawZrQqVnLI7iM9otErPIOTTtcbf4DhUnzBS+bGT5AZBSwi7qztUNLKPMoY9973xWCZrLXg2hb3LNpt77hJk1bI3uK7dVZwW2f1Kv2+rMqlaGi0kZVaHN9Rs7GnTnaJzqzXkheA8lHh8f9pBnN8JKxn/GM0bK2tQ+Yd2lzqMf+1IuUqDE3L9tvJNggWkHCE7SOhkdI1ogETO8ghs+cxagjo4o6mf9gN7FcX6L0EGTjN5IKeByLuLsUNouAQ=='
  grafana_admin_password: 'AgAVnXDigbgadQsrR6AZCtETUxSScAlXSo1F9wUyFsjE/73p8tKhivNTpil6h2nv2ldg+aHW/5lFFPB9KXZ+LE2O044+r+8rOR5tzkBCjqlanOTZObUR1GkbwwtLqFwO+NhogI+uIVujuR6aFX0BgPACdnRS7vSDVNP1Z53MU+KauIvTiDf6XJ7S+G5K51g80vwgZ8vsFODumpfNVP5S6rYNAgfzJm6xYbx6BnR1X13GNHXfiea94EYbuWhkOnlOK74r5tseaKv24yfDUZNwvKd44wqinR6bEKzePAe9N7UnvkxjZ64kD1O0ILxJ8aTbz2euFMoCwriCKxJ5v3C2lvcH/KPJ9QOaVQ8MP4G8g/JcGn1iUnfyYC4QbcpqIO34Yj84an0Q1hfskcooAjifTLzOKsdv9qOMnwpZ6bEFp0Uzcv/s/m++6DqW2WXgPMskcHq6lsoCvx29Mw3W0cLuBr/rpVf3fQZ+qTREvyZKuSjUqNo+8sgFKCeQnFus7ekG0sHtfrfUTzY3znsrOkM6xw8J5or9fmeNG/SccyLVxMqpJuwLiTq6WxbwHAXVu0TnwvgmhYXAqMavXqaCxgraqsNT317J93zftCzLsbDUBIMBBMKPu/XFVXBLoa3baYvpjWOBncjdqIFbpnskks8lpqXx6ns/XfS3i54eZY6AETALyiiELfz8Dum5pof7FgxzV4ajIcDIMH1jtw1d1WuA'
  
kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
          - job_name: redis_exporter
            static_configs:
            - targets: ['192.168.1.111:9121']
          - job_name: node
            static_configs:
            - targets: ['192.168.1.111:9100']
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.stg.aeternity.io"
      pathType: ImplementationSpecific

  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.stg.aeternity.io
        root_url: https://grafana.stg.aeternity.io
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.stg.aeternity.io"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
        websites:
          gnetId: 13659
          revision: 1
          datasource: Prometheus
        redis:
          gnetId: 763
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.stg.aeternity.io"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.stg.aeternity.io"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false
  
  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.stg.aepps.com/health/backend"
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 80
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 80%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: stg
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
